<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="main_timeline" id="1" localization="8" tooltip="" x="233" y="20"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="25"><BehaviorLayer name="main_behavior"><BehaviorKeyframe name="init" index="1"><Diagram><Box name="Stop" id="2" localization="8" tooltip="Stop the parent timeline at the current frame index.&#x0A;&#x0A;!!Warning!! This box does not stop the behavior! It is only the timeline which will&#x0A;stop playing, the keyframes and boxes will still be running." x="350" y="19"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onStop(self):
        self.getParentTimeline().pause()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" /></Box><Box name="Goto (name)" id="1" localization="8" tooltip="Jump to the frame name set in parameters." x="347" y="124"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onGo(self):
        self.getParentTimeline().goTo(self.getParameter("Frame name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" /><Parameter name="Frame name" inherits_from_parent="0" content_type="3" value="menu" default_value="" custom_choice="0" tooltip="Name of the frame you want to go to." id="3" /></Box><Box name="Deplacement" id="3" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="355" y="237"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import math

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

        self.murRefDist = None

    def onLoad(self):
        #put initialization code here
        self.almemory = ALProxy("ALMemory")
        self.motion = ALProxy("ALMotion")
        self.isRunning = False
        pass

    def onUnload(self):
        #put clean-up code here
        self.isRunning = False
        #pass

    def onInput_onStart(self, commande):
        self.isRunning = True

        self.motion.setAngles("Head", [0, 0], 0.1)

        #correction de la distance
        targetDistance = (commande-0.2191)/0.9893
        suiviDeMur = self.getParameter("SuiviDeMur")
        DistanceDuMur = self.getParameter("DistanceDuMur")
        DeplacementCentreParam = self.getParameter("DeplacementCentre")

        if DeplacementCentreParam == False:
            if suiviDeMur == "droit" or suiviDeMur == "gauche":
                self.murRefDist = suiviDeMur
            else:
                self.murRefDist = None

        useSensorValues = True
        originalPosition = self.motion.getRobotPosition(useSensorValues)

        dx = 0
        dy = 0
        dtheta = 0

        while (self.isRunning):
            #print("measuring...")

            #Calcul de dy
            dist_gauche = self.almemory.getData("Device/SubDeviceList/Platform/LaserSensor/Left/Horizontal/Seg07/X/Sensor/Value")
            dist_droit = self.almemory.getData("Device/SubDeviceList/Platform/LaserSensor/Right/Horizontal/Seg07/X/Sensor/Value")

            print("Distance gauche:" + str(dist_gauche))
            print("Distance droit:" + str(dist_droit))

            if(dist_droit + dist_gauche) < 0.5:    #corridor assez large?
                print("Impossible de passer.")
                self.motion.moveToward(0, 0, 0)
                continue

            if dist_gauche > 1.5:
                print("Distance selon droit")
                DeplacementCentre = False
                self.murRefDist = "droit"
            elif dist_gauche > 1.5:
                print("Distance selon gauche")
                DeplacementCentre = False
                self.murRefDist = "gauche"
            else:
                print("Déplacement centré")
                DeplacementCentre = DeplacementCentreParam

            if DeplacementCentre == True:
                dy = ((dist_gauche-dist_droit)/(dist_gauche+dist_droit))*0.5
            else:
                if self.murRefDist == "droit":
                    if (dist_droit > (DistanceDuMur+0.1)):
                        dy=0.2
                    elif (dist_droit <= (DistanceDuMur-0.1)):
                        dy=-0.35
                    else:
                        dy=0
                elif self.murRefDist == "gauche":
                    if (dist_gauche > (DistanceDuMur+0.1)):
                        dy=-0.2
                    elif (dist_gauche <= (DistanceDuMur-0.1)):
                        dy=0.35
                    else:
                        dy=0
            print dy

            #Calcul de theta
            if suiviDeMur == "droit":
                dist_a = self.almemory.getData("Device/SubDeviceList/Platform/LaserSensor/Right/Horizontal/Seg02/X/Sensor/Value")
                dist_b = self.almemory.getData("Device/SubDeviceList/Platform/LaserSensor/Right/Horizontal/Seg14/X/Sensor/Value")
                dist_c = math.sqrt(dist_a**2+dist_b**2-2*dist_a*dist_b*math.cos(math.pi/3))

                theta = (math.pi/3) - (math.acos((dist_c**2+dist_a**2-dist_b**2)/(2*dist_c*dist_a)))

            elif suiviDeMur == "gauche":
                dist_a = self.almemory.getData("Device/SubDeviceList/Platform/LaserSensor/Left/Horizontal/Seg02/X/Sensor/Value")
                dist_b = self.almemory.getData("Device/SubDeviceList/Platform/LaserSensor/Left/Horizontal/Seg14/X/Sensor/Value")
                dist_c = math.sqrt(dist_a**2+dist_b**2-2*dist_a*dist_b*math.cos(math.pi/3))

                theta = (math.pi/3) - (math.acos((dist_c**2+dist_a**2-dist_b**2)/(2*dist_c*dist_a)))

            else:
                self.motion.moveToward(1, 0, 0)
                self.isRunning = False
                break

            dtheta=(-theta)

            #Calcul de dx
            if dy < 0.15:
                dx += 0.1
                if dx > 1: dx = 1
            else:
                dx -= 0.1
                if dx < 0: dx = 0

            #Déplacement robot
            self.motion.moveToward(dx, dy, dtheta)

            #Évaluation de la position actuelle
            currentPosition = self.motion.getRobotPosition(useSensorValues)
            deplacement = [currentPosition[0]-originalPosition[0],currentPosition[1]-originalPosition[1]]
            distanceParcourue = (math.sqrt(deplacement[0]**2+deplacement[1]**2))

            #Vérification: Est-ce que la distance voulue est atteinte?
            if targetDistance-distanceParcourue <0.01:
                self.isRunning = False
                self.motion.moveToward(0, 0, 0)

            time.sleep(0.1)

        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="SuiviDeMur" inherits_from_parent="0" content_type="3" value="gauche" default_value="aucun" custom_choice="0" tooltip="" id="5"><Choice value="droit" /><Choice value="gauche" /><Choice value="aucun" /></Parameter><Parameter name="DistanceDuMur" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.4" min="0.3" max="0.8" tooltip="" id="6" /><Parameter name="DeplacementCentre" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="7" /></Box><Box name="Number Edit" id="7" localization="8" tooltip="Send the number you entered when the input is stimulated." plugin="numberedit_plugin" x="146" y="259"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped(2.4)]]></content></script><pluginContent><number>2.4</number></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the number on the output." id="2" /><Output name="onStopped" type="2" type_size="1" nature="2" inner="0" tooltip="The number you entered." id="3" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="3" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="menu" index="5"><Diagram><Box name="Tablet Touch" id="10" localization="8" tooltip="Sends an event when the tablet is touched&#x0A;&#x0A;V1.0.1&#x0A;" x="171" y="69"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False
        self.tabletService = None
        self.connectId = None

    def onUnload(self):
        if self.tabletService:
            self.disconnectListener()
            self.isRunning = False

    def disconnectListener(self):
        if self.connectId:
            try:
                self.tabletService.onTouch.disconnect(self.connectId)
                self.connectId = None
            except Exception as e:
                self.logger.error(e)

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def  onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        self.tabletService = self._getTabletService()
        if self.tabletService:
            try:
                if not self.connectId:
                    if self.getParameter("Action") == "On touch move":
                        self.connectId = self.tabletService.onTouchMove.connect(self.touchCallback)
                    elif self.getParameter("Action") == "On touch down":
                        self.connectId = self.tabletService.onTouchDown.connect(self.touchCallback)
                    elif self.getParameter("Action") == "On touch up":
                        self.connectId = self.tabletService.onTouchUp.connect(self.touchCallback)
            except Exception as err:
                self.logger.warning("Error during subscribe: %s " % err)
        else:
            self.logger.info("No ALTabletService, can't play listen for touch.")

    def touchCallback(self, x, y):
        self.onTouched([x, y])

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onTouched" type="0" type_size="1" nature="2" inner="0" tooltip="Send [x,y] position for one touch" id="4" /><Parameter name="Action" inherits_from_parent="0" content_type="3" value="Show the position of one touch on the tablet" default_value="On touch move" custom_choice="0" tooltip="Type of touch you want on the tablet." id="5"><Choice value="On touch move" /><Choice value="On touch down" /><Choice value="On touch up" /></Parameter></Box><Box name="Goto (name)" id="2" localization="8" tooltip="Jump to the frame name set in parameters." x="303" y="69"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onGo(self):
        self.getParentTimeline().goTo(self.getParameter("Frame name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" /><Parameter name="Frame name" inherits_from_parent="0" content_type="3" value="wave" default_value="" custom_choice="0" tooltip="Name of the frame you want to go to." id="3" /></Box><Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="4" /><Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="move" index="9"><Diagram><Box name="Run Behavior" id="3" localization="0" tooltip="Manage a behavior.&#x0A;&#x0A;Will start the behavior given as input when onStart is stimulated.&#x0A;&#x0A;Will stop it when onStop is stimulated.&#x0A;&#x0A;Will exit on onStopped when no error happened during behavior startup or stopping.&#x0A;&#x0A;Will exit on onError if an error happened, transmitting a string describing the error.&#x0A;&#x0A;Most notably (but not exclusively), the box will fail if you try to start a behavior not present on the robot, or if you try to start a behavior that&apos;s already started.&#x0A;" x="269" y="66"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.behaviorName = str()
        self.bm = ALProxy("ALBehaviorManager")

    def onUnload(self):
        if len(self.behaviorName) > 0:
            self.bm.stopBehavior(self.behaviorName)

    def onInput_onStart(self, p):
        if len(self.behaviorName) > 0 and self.behaviorName != p:
            raise RuntimeError("this box is already running another behavior")

        try:
            self.behaviorName = p
            self.bm.runBehavior(self.behaviorName)
        finally:
            self.behaviorName = str()
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /></Box><Box name="Output String" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="143" y="68"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.onStopped(self.getParameter("param_string")) #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="param_string" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="4" /></Box><Box name="Goto (name)" id="2" localization="8" tooltip="Jump to the frame name set in parameters." x="1118" y="57"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onGo(self):
        self.getParentTimeline().goTo(self.getParameter("Frame name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" /><Parameter name="Frame name" inherits_from_parent="0" content_type="3" value="menu" default_value="" custom_choice="0" tooltip="Name of the frame you want to go to." id="3" /></Box><Box name="Set External Anti-Collision" id="5" localization="8" tooltip="Enable or disable the collision protection on some specific part of the robot&apos;s body with external environment.&#x0A;&#x0A;For example if the protection is enabled on his left arm he will move his arm all the&#x0A;same than when it is not but avoiding his other body parts." x="138" y="189"><bitmap>media/images/box/sensors/anti_collision.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motion = ALProxy( "ALMotion" )

    def onUnload(self):
        pass

    def onInput_onSet(self):
        # is it enable or disable asked?
        enable = (self.getParameter("Action") == "Enable")
        # enable/disable collision protection
        self.motion.setExternalCollisionProtectionEnabled( self.getParameter("Body part"), enable )
        self.output() # activate output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The anti-collision feature is enabled or disabled when this input is stimulated." id="2" /><Output name="output" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" /><Parameter name="Body part" inherits_from_parent="0" content_type="3" value="Move" default_value="All" custom_choice="0" tooltip="Body part which avoids the collision." id="4"><Choice value="All" /><Choice value="Move" /><Choice value="Arms" /><Choice value="LArm" /><Choice value="RArm" /></Parameter><Parameter name="Action" inherits_from_parent="0" content_type="3" value="Enable" default_value="Enable" custom_choice="0" tooltip="Enable or disable the collision protection." id="5"><Choice value="Disable" /><Choice value="Enable" /></Parameter></Box><Box name="IsStanding" id="6" localization="8" tooltip="Uses ALRobotPosture to determine if the robot is standing or not." x="426" y="185"><bitmap>media/images/box/sensors/inertial_unit.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.motionProxy = ALProxy("ALMotion")
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onGet(self):
        if (self.postureProxy.getPostureFamily() == "Standing") and (self.motionProxy.robotIsWakeUp()):
            self.onSuccess()
        else:
            self.onFaillure()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="" id="2" /><Output name="onSuccess" type="1" type_size="1" nature="2" inner="0" tooltip="" id="3" /><Output name="onFaillure" type="1" type_size="1" nature="2" inner="0" tooltip="" id="4" /></Box><Box name="Move To" id="7" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="298" y="185"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[import almath
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03
    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"), \
            self.getParameter("Distance Y (m)"), \
            self.getParameter("Theta (rad)"))
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"), \
            self.getParameter("Distance Y (m)"), \
            self.getParameter("Theta (rad)"))

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos \
            and abs(positionError.y) < self.positionErrorThresholdPos \
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" /><Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" /><Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="1" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" /><Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" /><Parameter name="Theta (rad)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-3.14" max="3.14" tooltip="The orientation in radians for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" /><Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" /><Resource name="Legs" type="Lock" timeout="0" /></Box><Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="5" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="7" indexofinput="2" outputowner="5" indexofoutput="3" /><Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="4" /><Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="5" /><Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="security"><BehaviorKeyframe name="security" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="display"><BehaviorKeyframe name="display" index="1"><Diagram /></BehaviorKeyframe></BehaviorLayer><ActuatorList model="juliette"><ActuatorCurve name="" actuator="HeadPitch" mute="0" unit="0"><Key frame="25" value="-24.9194" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="25" value="-0.065262" /></ActuatorCurve><ActuatorCurve name="" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="25" value="28.9367" /></ActuatorCurve></ActuatorList></Timeline></Box><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>